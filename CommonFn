/*
* 返回浏览器名称+版本号 不能识别 IE11及Edge
*/
function getBrowserInfo(){
	var agent = navigator.userAgent.toLowerCase() ;	
	var regStr_ie = /msie [\d.]+;/gi ;
	var regStr_ff = /firefox\/[\d.]+/gi
	var regStr_chrome = /chrome\/[\d.]+/gi ;
	var regStr_saf = /safari\/[\d.]+/gi ;
	//IE
	if(agent.indexOf("msie") > 0)	{
		return agent.match(regStr_ie) ;
	}
	
	//firefox
	if(agent.indexOf("firefox") > 0){
		return agent.match(regStr_ff) ;
	}
	
	//Chrome
	if(agent.indexOf("chrome") > 0){
		return agent.match(regStr_chrome) ;
	}
	
	//Safari
	if(agent.indexOf("safari") > 0 && agent.indexOf("chrome") < 0){
		return agent.match(regStr_saf) ;
	}

}
/*****************************************************************************************************/
// 判断某种ele中是否含有attr
function elementSupportsAttribute(element, attribute) {
  var ele = document.createElement(element);
  if (attribute in ele) {
    return true;
  } else {
    return false;
  }
};
/*******************************************************************************************************/

/******************************************************************************************************/
//jsonp跨域处理
			//创建script标签
			function requestServerCall(url) {
				var head = document.head;
				var script = document.createElement("script");
				script.setAttribute("src", url);
				head.appendChild(script);
				head.removeChild(script);//添加成功获取数据后进行移除处理
			}
			//创建处理函数    
			function jsonpCallback(data) {
				alert(data.message); // Response data from the server
			}
			//发送请求
			function sendRequest() {
				// Edit with your Web Service URL
				requestServerCall("http://XXX.com?callback=jsonpCallback");
			}
/******************************************************************************************************/

/******************************************************************************************************/
//http协议强制跳转https协议
var str = window.location.href;
var arr = str.split('');
if(arr[4]!="s"){
	arr.splice(4,0,"s");
	var newStr = arr.join('');
	window.location.href = newStr;
};   
/******************************************************************************************************/
 
 /******************************************************************************************************/
//对象排序
function sortByKey(array,key){
    return array.sort(function(a,b){
        var x=a[key];
        var y=b[key];
        return ((x<y)?-1:((x>y)?1:0));
    });
};
/******************************************************************************************************/
/**
     * 四舍五入
     * @param number 要四舍五入的数字
     * @param precision 精度 保留小数点位数
     * @returns {*}
     */
    function round(number,precision) {
      const enlargeDigits = function enlargeDigits(times) {
        return function (number) {
          return +(String(number) + "e" + String(times));
        };
      };
      const toFixed = function toFixed(precision) {
        return function (number) {
          return number.toFixed(precision);
        };
      };
      const compose = function compose() {
        for (var _len = arguments.length, functions = Array(_len), _key = 0; _key < _len; _key++) {
          functions[_key] = arguments[_key];
        }

        var nonFunctionTypeLength = functions.filter(function (item) {
          return typeof item !== 'function';
        }).length;
        if (nonFunctionTypeLength > 0) {
          throw new Error("compose's params must be functions");
        }
        if (functions.length === 0) {
          return function (arg) {
            return arg;
          };
        }
        if (functions.length === 1) {
          return functions[0];
        }
        return functions.reduce(function (a, b) {
          return function () {
            return a(b.apply(undefined, arguments));
          };
        });
      };
      var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

      if (Number.isNaN(+number)) {
        throw new Error("number's type must be Number");
      }
      if (Number.isNaN(+precision)) {
        throw new Error("precision's type must be Number");
      }
      return compose(toFixed(precision), enlargeDigits(-precision), Math.round, enlargeDigits(precision))(number)
    }
